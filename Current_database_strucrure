    CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "pg_catalogpgsodium" WITH SCHEMA "pgsodiumpublic" IS 'standard public schema';                                                                                                                                                                                                                                                                                                                                                                                                                                         CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphqlpg_stat_statements" WITH SCHEMA "extensions";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensionspgjwt" WITH SCHEMA "extensionssupabase_vault" WITH SCHEMA "vaultuuid-ossp" WITH SCHEMA "extensionspublic"."group_role" AS ENUM (                                                                                 'admin',                                                                                                                'member'                                                                                                            );                                                                                                                                                                                                                                                                                                                                                                      ALTER TYPE "public"."group_role" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                   CREATE TYPE "public"."message_type" AS ENUM (                                                                               'text',                                                                                                                 'image',                                                                                                                'video',                                                                                                                'audio'                                                                                                             );                                                                                                                                                                                                                                                                                                                                                                      ALTER TYPE "public"."message_type" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                 CREATE TYPE "public"."notification_type" AS ENUM (                                                                          'group_invite',                                                                                                         'group_join',                                                                                                           'group_leave',                                                                                                          'message',                                                                                                              'like',                                                                                                                 'comment',                                                                                                              'mention',                                                                                                              'challenge'                                                                                                         );                                                                                                                                                                                                                                                                                                                                                                      ALTER TYPE "public"."notification_type" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                            CREATE TYPE "public"."post_content_type" AS ENUM (                                                                          'text',                                                                                                                 'image',                                                                                                                'video'                                                                                                             );                                                                                                                                                                                                                                                                                                                                                                      ALTER TYPE "public"."post_content_type" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                            CREATE TYPE "public"."post_with_user" AS (                                                                                      "id" "uuid",                                                                                                            "user_id" "uuid",                                                                                                       "content_type" "public"."post_content_type",                                                                            "content_url" "text",                                                                                                   "caption" "text",                                                                                                       "expires_at" timestamp with time zone,                                                                                  "view_count" integer,                                                                                                   "like_count" integer,                                                                                                   "comment_count" integer,                                                                                                "share_count" integer,                                                                                                  "created_at" timestamp with time zone,                                                                                  "user_info" "jsonb"                                                                                             );                                                                                                                                                                                                                                                                                                                                                                      ALTER TYPE "public"."post_with_user" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                               CREATE OR REPLACE FUNCTION "public"."cleanup_expired_content"() RETURNS "void"                                              LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               BEGIN                                                                                                                       -- Delete expired posts from storage                                                                                    DELETE FROM storage.objects                                                                                             WHERE bucket_id = 'posts'                                                                                               AND EXISTS (                                                                                                                SELECT 1 FROM public.posts                                                                                              WHERE content_url = name                                                                                                AND expires_at < NOW()                                                                                              );                                                                                                                                                                                                                                              -- Delete expired posts from database                                                                                   DELETE FROM public.posts                                                                                                WHERE expires_atpublic"."cleanup_expired_content"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                                CREATE OR REPLACE FUNCTION "public"."create_group_with_admin"("p_name" "text", "p_description" "text", "p_image_url" "text", "p_is_private" boolean, "p_user_id" "uuid") RETURNS "json"                                                             LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               DECLARE                                                                                                                   v_group_id UUID;                                                                                                        v_result json;                                                                                                        BEGIN                                                                                                                     -- Insert group                                                                                                         INSERT INTO public.groups (                                                                                               name,                                                                                                                   description,                                                                                                            image_url,                                                                                                              is_private,                                                                                                             created_by                                                                                                            )                                                                                                                       VALUES (                                                                                                                  p_name,                                                                                                                 p_description,                                                                                                          p_image_url,                                                                                                            p_is_private,                                                                                                           p_user_id                                                                                                             )                                                                                                                       RETURNING id INTO v_group_id;                                                                                                                                                                                                                   -- Add creator as admin                                                                                                 INSERT INTO public.group_members (                                                                                        group_id,                                                                                                               user_id,                                                                                                                role                                                                                                                  )                                                                                                                       VALUES (                                                                                                                  v_group_id,                                                                                                             p_user_id,                                                                                                              'admin'                                                                                                               );                                                                                                                                                                                                                                              -- Get the created group                                                                                                SELECT row_to_json(g.*)                                                                                                 INTO v_result                                                                                                           FROM public.groups g                                                                                                    WHERE g.id = v_group_id;                                                                                                                                                                                                                        RETURN v_resultpublic"."create_group_with_admin"("p_name" "text", "p_description" "text", "p_image_url" "text", "p_is_private" boolean, "p_user_id" "uuid") OWNER TO "postgres";                                                                                                                                                                                                                                                                                                               CREATE OR REPLACE FUNCTION "public"."create_post"("p_content_type" "text", "p_content_url" "text" DEFAULT NULL::"text", "p_caption" "text" DEFAULT NULL::"text", "p_group_id" "uuid" DEFAULT NULL::"uuid", "p_expires_at" timestamp with time zone DEFAULT NULL::timestamp with time zone, "p_is_challenge_entry" boolean DEFAULT false, "p_challenge_id" "uuid" DEFAULT NULL::"uuid") RETURNS "json"                                                                                               LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               DECLARE                                                                                                                     v_post_id UUID;                                                                                                         v_user_id UUID;                                                                                                         v_result json;                                                                                                      BEGIN                                                                                                                       -- Get current user ID                                                                                                  v_user_id := auth.uid();                                                                                                IF v_user_id IS NULL THEN                                                                                                   RAISE EXCEPTION 'Not authenticated';                                                                                END IF;                                                                                                                                                                                                                                         -- Insert the post                                                                                                      INSERT INTO public.posts (                                                                                                  user_id,                                                                                                                content_type,                                                                                                           content_url,                                                                                                            caption,                                                                                                                group_id,                                                                                                               expires_at,                                                                                                             is_challenge_entry,                                                                                                     challenge_id                                                                                                        )                                                                                                                       VALUES (                                                                                                                    v_user_id,                                                                                                              p_content_type::post_content_type,                                                                                      p_content_url,                                                                                                          p_caption,                                                                                                              p_group_id,                                                                                                             COALESCE(p_expires_at, now() + interval '24 hours'),                                                                    p_is_challenge_entry,                                                                                                   p_challenge_id                                                                                                      )                                                                                                                       RETURNING id INTO v_post_id;                                                                                                                                                                                                                    -- Get the complete post data with user info                                                                            SELECT                                                                                                                      json_build_object(                                                                                                          'id', p.id,                                                                                                             'content_type', p.content_type,                                                                                         'content_url', p.content_url,                                                                                           'caption', p.caption,                                                                                                   'expires_at', p.expires_at,                                                                                             'created_at', p.created_at,                                                                                             'updated_at', p.updated_at,                                                                                             'is_challenge_entry', p.is_challenge_entry,                                                                             'challenge_id', p.challenge_id,                                                                                         'group_id', p.group_id,                                                                                                 'like_count', p.like_count,                                                                                             'comment_count', p.comment_count,                                                                                       'share_count', p.share_count,                                                                                           'user', json_build_object(                                                                                                  'id', u.id,                                                                                                             'username', u.raw_user_meta_data->>'username',                                                                          'avatar_url', u.raw_user_meta_data->>'avatar_url'                                                                   )                                                                                                                   )                                                                                                                   INTO v_result                                                                                                           FROM public.posts p                                                                                                     JOIN auth.users u ON u.id = p.user_id                                                                                   WHERE p.id = v_post_id;                                                                                                                                                                                                                         -- Create notification for group post if applicable                                                                     IF p_group_id IS NOT NULL THEN                                                                                              INSERT INTO public.notifications (                                                                                          user_id,                                                                                                                type,                                                                                                                   title,                                                                                                                  content,                                                                                                                data                                                                                                                )                                                                                                                       SELECT                                                                                                                      gm.user_id,                                                                                                             'post'::notification_type,                                                                                              'New Post in Group',                                                                                                    COALESCE(p_caption, 'New ' || p_content_type || ' post'),                                                               jsonb_build_object(                                                                                                         'post_id', v_post_id,                                                                                                   'group_id', p_group_id                                                                                              )                                                                                                                   FROM public.group_members gm                                                                                            WHERE gm.group_id = p_group_id                                                                                          AND gm.user_id != v_user_id;                                                                                        END IF;                                                                                                                                                                                                                                         RETURN v_resultpublic"."create_post"("p_content_type" "text", "p_content_url" "text", "p_caption" "text", "p_group_id" "uuid", "p_expires_at" timestamp with time zone, "p_is_challenge_entry" boolean, "p_challenge_id" "uuid") OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                                                                  CREATE OR REPLACE FUNCTION "public"."get_group_details"("p_group_id" "uuid") RETURNS "jsonb"                                LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               DECLARE                                                                                                                     v_result jsonb;                                                                                                     BEGIN                                                                                                                       SELECT jsonb_build_object(                                                                                                  'id', g.id,                                                                                                             'name', g.name,                                                                                                         'description', g.description,                                                                                           'image_url', g.image_url,                                                                                               'created_at', g.created_at,                                                                                             'created_by', g.created_by,                                                                                             'is_private', g.is_private,                                                                                             'member_count', g.member_count,                                                                                         'members', (                                                                                                                SELECT jsonb_agg(                                                                                                           jsonb_build_object(                                                                                                         'id', gm.id,                                                                                                            'role', gm.role,                                                                                                        'joined_at', gm.joined_at,                                                                                              'user', jsonb_build_object(                                                                                                 'id', p.id,                                                                                                             'username', p.username,                                                                                                 'avatar_url', p.avatar_url                                                                                          )                                                                                                                   )                                                                                                                   )                                                                                                                       FROM group_members gm                                                                                                   JOIN profiles p ON p.id = gm.user_id                                                                                    WHERE gm.group_id = g.id                                                                                            )                                                                                                                   ) INTO v_result                                                                                                         FROM groups g                                                                                                           WHERE g.id = p_group_id;                                                                                                                                                                                                                        RETURN v_resultpublic"."get_group_details"("p_group_id" "uuid") OWNER TO "postgres";                                                                                                                                                                                                                                                                                   CREATE OR REPLACE FUNCTION "public"."get_group_with_details"("p_group_id" "uuid") RETURNS "json"                            LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               DECLARE                                                                                                                     v_result json;                                                                                                      BEGIN                                                                                                                       SELECT                                                                                                                      json_build_object(                                                                                                          'id', g.id,                                                                                                             'name', g.name,                                                                                                         'description', g.description,                                                                                           'image_url', g.image_url,                                                                                               'created_at', g.created_at,                                                                                             'created_by', g.created_by,                                                                                             'is_private', g.is_private,                                                                                             'member_count', g.member_count,                                                                                         'members', (                                                                                                                SELECT json_agg(                                                                                                            json_build_object(                                                                                                          'id', gm.id,                                                                                                            'role', gm.role,                                                                                                        'joined_at', gm.joined_at,                                                                                              'user', json_build_object(                                                                                                  'id', u.id,                                                                                                             'username', u.raw_user_meta_data->>'username',                                                                          'avatar_url', u.raw_user_meta_data->>'avatar_url'                                                                   )                                                                                                                   )                                                                                                                   )                                                                                                                       FROM public.group_members gm                                                                                            JOIN auth.users u ON u.id = gm.user_id                                                                                  WHERE gm.group_id = g.id                                                                                            )                                                                                                                   )                                                                                                                   INTO v_result                                                                                                           FROM public.groups g                                                                                                    WHERE g.id = p_group_id;                                                                                                                                                                                                                        RETURN v_resultpublic"."get_group_with_details"("p_group_id" "uuid") OWNER TO "postgres";                                                                                                                                                                                                                                                                              CREATE OR REPLACE FUNCTION "public"."get_post_with_user"("post_id" "uuid") RETURNS "json"                                   LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               DECLARE                                                                                                                     result json;                                                                                                        BEGIN                                                                                                                       SELECT                                                                                                                      json_build_object(                                                                                                          'id', p.id,                                                                                                             'content_type', p.content_type,                                                                                         'content_url', p.content_url,                                                                                           'caption', p.caption,                                                                                                   'expires_at', p.expires_at,                                                                                             'created_at', p.created_at,                                                                                             'updated_at', p.updated_at,                                                                                             'is_challenge_entry', p.is_challenge_entry,                                                                             'challenge_id', p.challenge_id,                                                                                         'group_id', p.group_id,                                                                                                 'like_count', p.like_count,                                                                                             'comment_count', p.comment_count,                                                                                       'share_count', p.share_count,                                                                                           'user', json_build_object(                                                                                                  'id', u.id,                                                                                                             'username', u.raw_user_meta_data->>'username',                                                                          'avatar_url', u.raw_user_meta_data->>'avatar_url'                                                                   )                                                                                                                   )                                                                                                                   INTO result                                                                                                             FROM public.posts p                                                                                                     JOIN auth.users u ON u.id = p.user_id                                                                                   WHERE p.id = post_id;                                                                                                                                                                                                                           RETURN resultpublic"."get_post_with_user"("post_id" "uuid") OWNER TO "postgres";                                                                                                                                                                                                                                                                                     CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"                                                   LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               BEGIN                                                                                                                     -- Check if user already exists                                                                                         IF NOT EXISTS (SELECT 1 FROM public.users WHERE id = NEW.id) THEN                                                         INSERT INTO public.users (                                                                                                id,                                                                                                                     email,                                                                                                                  username,                                                                                                               full_name,                                                                                                              avatar_url,                                                                                                             is_verified,                                                                                                            last_seen,                                                                                                              created_at,                                                                                                             updated_at                                                                                                            ) VALUES (                                                                                                                NEW.id,                                                                                                                 NEW.email,                                                                                                              COALESCE(                                                                                                                 NEW.raw_user_meta_data->>'username',                                                                                    'User_' || substr(NEW.id::text, 1, 8)                                                                                 ),                                                                                                                      COALESCE(NEW.raw_user_meta_data->>'full_name', NULL),                                                                   COALESCE(NEW.raw_user_meta_data->>'avatar_url', NULL),                                                                  falsepublic"."handle_new_user"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                                        CREATE OR REPLACE FUNCTION "public"."handle_post_counts"() RETURNS "trigger"                                                LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               begin                                                                                                                     if TG_OP = 'INSERT' then                                                                                                  -- Increment counts                                                                                                     update public.posts                                                                                                     set like_count = like_count + 1                                                                                         where id = NEW.post_id;                                                                                                 return NEW;                                                                                                           elsif TG_OP = 'DELETE' then                                                                                               -- Decrement counts                                                                                                     update public.posts                                                                                                     set like_count = like_count - 1                                                                                         where id = OLD.post_id;                                                                                                 return OLD;                                                                                                           end if;                                                                                                                 return null;                                                                                                          end;                                                                                                                    $$;                                                                                                                                                                                                                                                                                                                                                                     ALTER FUNCTION "public"."handle_post_counts"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                                     CREATE OR REPLACE FUNCTION "public"."handle_updated_at"() RETURNS "trigger"                                                 LANGUAGE "plpgsql"                                                                                                      AS $$                                                                                                               begin                                                                                                                     new.updated_at = now();                                                                                                 return new;                                                                                                           end;                                                                                                                    $$;                                                                                                                                                                                                                                                                                                                                                                     ALTER FUNCTION "public"."handle_updated_at"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                                      CREATE OR REPLACE FUNCTION "public"."invite_to_group"("p_group_id" "uuid", "p_invitee_id" "uuid") RETURNS "uuid"            LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               DECLARE                                                                                                                     v_invitation_id UUID;                                                                                               BEGIN                                                                                                                       -- Check if inviter is group admin                                                                                      IF NOT EXISTS (                                                                                                             SELECT 1 FROM public.group_members                                                                                      WHERE group_id = p_group_id                                                                                             AND user_id = auth.uid()                                                                                                AND role = 'admin'                                                                                                  ) THEN                                                                                                                      RAISE EXCEPTION 'Only group admins can send invitations';                                                           END IF;                                                                                                                                                                                                                                         -- Create invitation                                                                                                    INSERT INTO public.group_invitations (group_id, inviter_id, invitee_id)                                                 VALUES (p_group_id, auth.uid(), p_invitee_id)                                                                           RETURNING id INTO v_invitation_id;                                                                                                                                                                                                              -- Create notification                                                                                                  INSERT INTO public.notifications (                                                                                          user_id,                                                                                                                type,                                                                                                                   title,                                                                                                                  content,                                                                                                                data                                                                                                                )                                                                                                                       SELECT                                                                                                                      p_invitee_id,                                                                                                           'group_invite',                                                                                                         'Group Invitation',                                                                                                     'You have been invited to join ' || g.name,                                                                             jsonb_build_object(                                                                                                         'group_id', g.id,                                                                                                       'group_name', g.name,                                                                                                   'invitation_id', v_invitation_id,                                                                                       'inviter_name', u.username                                                                                          )                                                                                                                   FROM public.groups g                                                                                                    JOIN auth.users u ON u.id = auth.uid()                                                                                  WHERE g.id = p_group_id;                                                                                                                                                                                                                        RETURN v_invitation_idpublic"."invite_to_group"("p_group_id" "uuid", "p_invitee_id" "uuid") OWNER TO "postgres";                                                                                                                                                                                                                                                              CREATE OR REPLACE FUNCTION "public"."respond_to_group_invitation"("p_invitation_id" "uuid", "p_accept" boolean) RETURNS boolean                                                                                                                     LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               DECLARE                                                                                                                     v_group_id UUID;                                                                                                        v_invitee_id UUID;                                                                                                  BEGIN                                                                                                                       -- Get invitation details                                                                                               SELECT group_id, invitee_id INTO v_group_id, v_invitee_id                                                               FROM public.group_invitations                                                                                           WHERE id = p_invitation_id AND invitee_id = auth.uid()                                                                  FOR UPDATE;                                                                                                                                                                                                                                     IF NOT FOUND THEN                                                                                                           RAISE EXCEPTION 'Invitation not found';                                                                             END IF;                                                                                                                                                                                                                                         IF p_accept THEN                                                                                                            -- Add user to group                                                                                                    INSERT INTO public.group_members (group_id, user_id, role)                                                              VALUES (v_group_id, auth.uid(), 'member');                                                                                                                                                                                                      -- Update invitation status                                                                                             UPDATE public.group_invitations                                                                                         SET status = 'accepted'                                                                                                 WHERE id = p_invitation_id;                                                                                         ELSE                                                                                                                        -- Update invitation status                                                                                             UPDATE public.group_invitations                                                                                         SET status = 'declined'                                                                                                 WHERE id = p_invitation_id;                                                                                         END IF;                                                                                                                                                                                                                                         RETURN truepublic"."respond_to_group_invitation"("p_invitation_id" "uuid", "p_accept" boolean) OWNER TO "postgres";                                                                                                                                                                                                                                                CREATE OR REPLACE FUNCTION "public"."sync_user_data"() RETURNS "trigger"                                                    LANGUAGE "plpgsql" SECURITY DEFINER                                                                                     AS $$                                                                                                               BEGIN                                                                                                                     -- Update profile if user metadata changes                                                                              IF (NEW.raw_user_meta_data IS DISTINCT FROM OLD.raw_user_meta_data) THEN                                                  UPDATE public.profiles                                                                                                  SET                                                                                                                       username = COALESCE(NEW.raw_user_meta_data->>'username', profiles.username),                                            avatar_url = COALESCE(NEW.raw_user_meta_data->>'avatar_url', profiles.avatar_url),                                      updated_at = CURRENT_TIMESTAMP                                                                                        WHERE id = NEW.id;                                                                                                    END IF;                                                                                                                 RETURN NEW;                                                                                                           END;                                                                                                                    $$;                                                                                                                                                                                                                                                                                                                                                                     ALTER FUNCTION "public"."sync_user_data"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                                         CREATE OR REPLACE FUNCTION "public"."update_comment_like_count"() RETURNS "trigger"                                         LANGUAGE "plpgsql"                                                                                                      AS $$                                                                                                               BEGIN                                                                                                                       IF TG_OP = 'INSERT' THEN                                                                                                    UPDATE public.comments                                                                                                  SET like_count = like_count + 1                                                                                         WHERE id = NEW.comment_id;                                                                                          ELSIF TG_OP = 'DELETE' THEN                                                                                                 UPDATE public.comments                                                                                                  SET like_count = like_count - 1                                                                                         WHERE id = OLD.comment_id;                                                                                          END IF;                                                                                                                 RETURN NULL;                                                                                                        END;                                                                                                                    $$;                                                                                                                                                                                                                                                                                                                                                                     ALTER FUNCTION "public"."update_comment_like_count"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                              CREATE OR REPLACE FUNCTION "public"."update_group_last_message_at"() RETURNS "trigger"                                      LANGUAGE "plpgsql"                                                                                                      AS $$                                                                                                               BEGIN                                                                                                                       UPDATE public.groups                                                                                                    SET last_message_at = NEW.created_at                                                                                    WHERE id = NEW.group_id;                                                                                                RETURN NEW;                                                                                                         END;                                                                                                                    $$;                                                                                                                                                                                                                                                                                                                                                                     ALTER FUNCTION "public"."update_group_last_message_at"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                           CREATE OR REPLACE FUNCTION "public"."update_group_member_count"() RETURNS "trigger"                                         LANGUAGE "plpgsql"                                                                                                      AS $$                                                                                                               BEGIN                                                                                                                       IF TG_OP = 'INSERT' THEN                                                                                                    UPDATE public.groups                                                                                                    SET member_count = member_count + 1                                                                                     WHERE id = NEW.group_id;                                                                                            ELSIF TG_OP = 'DELETE' THEN                                                                                                 UPDATE public.groups                                                                                                    SET member_count = member_count - 1                                                                                     WHERE id = OLD.group_id;                                                                                            END IF;                                                                                                                 RETURN NULL;                                                                                                        END;                                                                                                                    $$;                                                                                                                                                                                                                                                                                                                                                                     ALTER FUNCTION "public"."update_group_member_count"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                              CREATE OR REPLACE FUNCTION "public"."update_post_counts"() RETURNS "trigger"                                                LANGUAGE "plpgsql"                                                                                                      AS $$                                                                                                               BEGIN                                                                                                                       IF TG_TABLE_NAME = 'likes' THEN                                                                                             IF TG_OP = 'INSERT' THEN                                                                                                    UPDATE public.posts                                                                                                     SET like_count = like_count + 1                                                                                         WHERE id = NEW.post_id;                                                                                             ELSIF TG_OP = 'DELETE' THEN                                                                                                 UPDATE public.posts                                                                                                     SET like_count = like_count - 1                                                                                         WHERE id = OLD.post_id;                                                                                             END IF;                                                                                                             ELSIF TG_TABLE_NAME = 'comments' THEN                                                                                       IF TG_OP = 'INSERT' THEN                                                                                                    UPDATE public.posts                                                                                                     SET comment_count = comment_count + 1                                                                                   WHERE id = NEW.post_id;                                                                                             ELSIF TG_OP = 'DELETE' THEN                                                                                                 UPDATE public.posts                                                                                                     SET comment_count = comment_count - 1                                                                                   WHERE id = OLD.post_id;                                                                                             END IF;                                                                                                             ELSIF TG_TABLE_NAME = 'shares' THEN                                                                                         IF TG_OP = 'INSERT' THEN                                                                                                    UPDATE public.posts                                                                                                     SET share_count = share_count + 1                                                                                       WHERE id = NEW.post_id;                                                                                             END IF;                                                                                                             END IF;                                                                                                                 RETURN NULL;                                                                                                        END;                                                                                                                    $$;                                                                                                                                                                                                                                                                                                                                                                     ALTER FUNCTION "public"."update_post_counts"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                                     CREATE OR REPLACE FUNCTION "public"."update_post_like_count"() RETURNS "trigger"                                            LANGUAGE "plpgsql"                                                                                                      AS $$                                                                                                               BEGIN                                                                                                                       IF TG_OP = 'INSERT' THEN                                                                                                    UPDATE public.posts                                                                                                     SET like_count = (                                                                                                          SELECT COUNT(*)                                                                                                         FROM public.likes                                                                                                       WHERE post_id = NEW.post_id                                                                                         )                                                                                                                       WHERE id = NEW.post_id;                                                                                             ELSIF TG_OP = 'DELETE' THEN                                                                                                 UPDATE public.posts                                                                                                     SET like_count = (                                                                                                          SELECT COUNT(*)                                                                                                         FROM public.likes                                                                                                       WHERE post_id = OLD.post_id                                                                                         )                                                                                                                       WHERE id = OLD.post_id;                                                                                             END IF;                                                                                                                 RETURN NULL;                                                                                                        END;                                                                                                                    $$;                                                                                                                                                                                                                                                                                                                                                                     ALTER FUNCTION "public"."update_post_like_count"() OWNER TO "postgres";                                                                                                                                                                                                                                                                                                 CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"                                          LANGUAGE "plpgsql"                                                                                                      AS $$                                                                                                               BEGIN                                                                                                                       NEW.updated_at = TIMEZONE('utcpublic"."update_updated_at_column"() OWNER TO "postgres";                                                                                                                                                                       SET default_tablespace = '';                                                                                                                                                                                                                    SET default_table_access_method = "heap";                                                                                                                                                                                                                                                                                                                               CREATE TABLE IF NOT EXISTS "public"."challenges" (                                                                          "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "title" "text" NOT NULL,                                                                                                "description" "text",                                                                                                   "created_by" "uuid",                                                                                                    "start_time" timestamp with time zone NOT NULL,                                                                         "end_time" timestamp with time zone NOT NULL,                                                                           "media_type" "text",                                                                                                    "status" "text" DEFAULT 'active'::"text",                                                                               CONSTRAINT "challenges_allowed_type_check" CHECK (("media_type" = ANY (ARRAY['video'::"text", 'image'::"text", 'audio'::"text"]))),                                                                                                             CONSTRAINT "challenges_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'completed'::"text"])))        );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."challenges" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                  CREATE TABLE IF NOT EXISTS "public"."comment_likes" (                                                                       "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "comment_id" "uuid" NOT NULL,                                                                                           "user_id" "uuid" NOT NULL,                                                                                              "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."comment_likes" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                               CREATE TABLE IF NOT EXISTS "public"."comments" (                                                                            "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "post_id" "uuid" NOT NULL,                                                                                              "user_id" "uuid" NOT NULL,                                                                                              "parent_id" "uuid",                                                                                                     "content" "text" NOT NULL,                                                                                              "like_count" integer DEFAULT 0,                                                                                         "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."comments" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                    CREATE TABLE IF NOT EXISTS "public"."group_invitations" (                                                                   "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "group_id" "uuid" NOT NULL,                                                                                             "inviter_id" "uuid" NOT NULL,                                                                                           "invitee_id" "uuid" NOT NULL,                                                                                           "status" "text" DEFAULT 'pending'::"text",                                                                              "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              CONSTRAINT "group_invitations_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'accepted'::"text", 'declined'::"text"])))                                                                                                     );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."group_invitations" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                           CREATE TABLE IF NOT EXISTS "public"."group_members" (                                                                       "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "group_id" "uuid",                                                                                                      "user_id" "uuid",                                                                                                       "role" "text" DEFAULT 'member'::"text",                                                                                 "joined_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                               CONSTRAINT "group_members_role_check" CHECK (("role" = ANY (ARRAY['member'::"text", 'admin'::"text", 'moderator'::"text"])))                                                                                                                );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."group_members" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                               CREATE TABLE IF NOT EXISTS "public"."group_message_reactions" (                                                             "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,                                                         "message_id" "uuid" NOT NULL,                                                                                           "user_id" "uuid" NOT NULL,                                                                                              "emoji" character varying(32) NOT NULL,                                                                                 "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())                                    );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."group_message_reactions" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                     CREATE TABLE IF NOT EXISTS "public"."group_message_reads" (                                                                 "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,                                                         "message_id" "uuid" NOT NULL,                                                                                           "user_id" "uuid" NOT NULL,                                                                                              "read_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())                                       );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."group_message_reads" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                         CREATE TABLE IF NOT EXISTS "public"."group_messages" (                                                                      "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,                                                         "group_id" "uuid" NOT NULL,                                                                                             "user_id" "uuid" NOT NULL,                                                                                              "content" "text" NOT NULL,                                                                                              "content_type" character varying(10) NOT NULL,                                                                          "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),                                       "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),                                       "is_edited" boolean DEFAULT false,                                                                                      "reply_to" "uuid",                                                                                                      "metadata" "jsonb" DEFAULT '{}'::"jsonb",                                                                               CONSTRAINT "group_messages_content_type_check" CHECK ((("content_type")::"text" = ANY ((ARRAY['text'::character varying, 'image'::character varying, 'audio'::character varying, 'video'::character varying])::"text"[])))                  );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."group_messages" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                              CREATE TABLE IF NOT EXISTS "public"."groups" (                                                                              "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "name" "text" NOT NULL,                                                                                                 "description" "text",                                                                                                   "image_url" "text",                                                                                                     "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "created_by" "uuid",                                                                                                    "is_private" boolean DEFAULT false,                                                                                     "member_count" integer DEFAULT 0                                                                                    );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."groups" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                      CREATE TABLE IF NOT EXISTS "public"."likes" (                                                                               "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "post_id" "uuid" NOT NULL,                                                                                              "user_id" "uuid" NOT NULL,                                                                                              "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."likes" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                       CREATE TABLE IF NOT EXISTS "public"."message_receipts" (                                                                    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "message_id" "uuid" NOT NULL,                                                                                           "user_id" "uuid" NOT NULL,                                                                                              "read_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                                 "received_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                             "downloaded_at" timestamp with time zone                                                                            );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."message_receipts" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                            CREATE TABLE IF NOT EXISTS "public"."messages" (                                                                            "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "group_id" "uuid" NOT NULL,                                                                                             "user_id" "uuid" NOT NULL,                                                                                              "content" "text" NOT NULL,                                                                                              "content_type" "public"."message_type" NOT NULL,                                                                        "metadata" "jsonb",                                                                                                     "is_system_message" boolean DEFAULT false,                                                                              "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "deleted_at" timestamp with time zone                                                                               );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."messages" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                    CREATE TABLE IF NOT EXISTS "public"."notifications" (                                                                       "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "user_id" "uuid" NOT NULL,                                                                                              "type" "public"."notification_type" NOT NULL,                                                                           "title" "text" NOT NULL,                                                                                                "content" "text" NOT NULL,                                                                                              "data" "jsonb",                                                                                                         "is_read" boolean DEFAULT false,                                                                                        "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."notifications" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                               CREATE TABLE IF NOT EXISTS "public"."posts" (                                                                               "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "user_id" "uuid" NOT NULL,                                                                                              "group_id" "uuid",                                                                                                      "content_type" "public"."post_content_type" NOT NULL,                                                                   "content_url" "text",                                                                                                   "caption" "text",                                                                                                       "expires_at" timestamp with time zone DEFAULT ("now"() + '24:00:00'::interval),                                         "view_count" integer DEFAULT 0,                                                                                         "like_count" integer DEFAULT 0,                                                                                         "comment_count" integer DEFAULT 0,                                                                                      "share_count" integer DEFAULT 0,                                                                                        "is_challenge_entry" boolean DEFAULT false,                                                                             "challenge_id" "uuid",                                                                                                  "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."posts" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                       CREATE TABLE IF NOT EXISTS "public"."profiles" (                                                                            "id" "uuid" NOT NULL,                                                                                                   "username" "text",                                                                                                      "avatar_url" "text",                                                                                                    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."profiles" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                    CREATE TABLE IF NOT EXISTS "public"."shares" (                                                                              "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "post_id" "uuid" NOT NULL,                                                                                              "user_id" "uuid" NOT NULL,                                                                                              "platform" "text",                                                                                                      "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."shares" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                      CREATE TABLE IF NOT EXISTS "public"."submissions" (                                                                         "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "user_id" "uuid",                                                                                                       "challenge_id" "uuid",                                                                                                  "content_url" "text" NOT NULL,                                                                                          "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."submissions" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                 CREATE TABLE IF NOT EXISTS "public"."users" (                                                                               "id" "uuid" NOT NULL,                                                                                                   "username" "text" NOT NULL,                                                                                             "full_name" "text",                                                                                                     "email" "text" NOT NULL,                                                                                                "avatar_url" "text",                                                                                                    "bio" "text",                                                                                                           "phone_number" "text",                                                                                                  "address" "text",                                                                                                       "is_verified" boolean DEFAULT false,                                                                                    "last_seen" timestamp with time zone,                                                                                   "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,                              "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL                           );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."users" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                       CREATE TABLE IF NOT EXISTS "public"."votes" (                                                                               "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,                                                                       "user_id" "uuid",                                                                                                       "challenge_id" "uuid",                                                                                                  "submission_id" "uuid"                                                                                              );                                                                                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."votes" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                                       ALTER TABLE ONLY "public"."challenges"                                                                                      ADD CONSTRAINT "challenges_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                        ALTER TABLE ONLY "public"."comment_likes"                                                                                   ADD CONSTRAINT "comment_likes_comment_id_user_id_key" UNIQUE ("comment_id", "user_id");                                                                                                                                                                                                                                                                                                                                                                                                     ALTER TABLE ONLY "public"."comment_likes"                                                                                   ADD CONSTRAINT "comment_likes_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                     ALTER TABLE ONLY "public"."comments"                                                                                        ADD CONSTRAINT "comments_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                          ALTER TABLE ONLY "public"."group_invitations"                                                                               ADD CONSTRAINT "group_invitations_group_id_invitee_id_key" UNIQUE ("group_id", "invitee_id");                                                                                                                                                                                                                                                                                                                                                                                               ALTER TABLE ONLY "public"."group_invitations"                                                                               ADD CONSTRAINT "group_invitations_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                 ALTER TABLE ONLY "public"."group_members"                                                                                   ADD CONSTRAINT "group_members_group_id_user_id_key" UNIQUE ("group_id", "user_id");                                                                                                                                                                                                                                                                                                                                                                                                         ALTER TABLE ONLY "public"."group_members"                                                                                   ADD CONSTRAINT "group_members_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                     ALTER TABLE ONLY "public"."group_message_reactions"                                                                         ADD CONSTRAINT "group_message_reactions_message_id_user_id_emoji_key" UNIQUE ("message_id", "user_id", "emoji");                                                                                                                                                                                                                                                                                                                                                                            ALTER TABLE ONLY "public"."group_message_reactions"                                                                         ADD CONSTRAINT "group_message_reactions_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                           ALTER TABLE ONLY "public"."group_message_reads"                                                                             ADD CONSTRAINT "group_message_reads_message_id_user_id_key" UNIQUE ("message_id", "user_id");                                                                                                                                                                                                                                                                                                                                                                                               ALTER TABLE ONLY "public"."group_message_reads"                                                                             ADD CONSTRAINT "group_message_reads_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                               ALTER TABLE ONLY "public"."group_messages"                                                                                  ADD CONSTRAINT "group_messages_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                    ALTER TABLE ONLY "public"."groups"                                                                                          ADD CONSTRAINT "groups_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                            ALTER TABLE ONLY "public"."likes"                                                                                           ADD CONSTRAINT "likes_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                             ALTER TABLE ONLY "public"."likes"                                                                                           ADD CONSTRAINT "likes_post_id_user_id_key" UNIQUE ("post_id", "user_id");                                                                                                                                                                                                                                                                                                                                                                                                                   ALTER TABLE ONLY "public"."message_receipts"                                                                                ADD CONSTRAINT "message_receipts_message_id_user_id_key" UNIQUE ("message_id", "user_id");                                                                                                                                                                                                                                                                                                                                                                                                  ALTER TABLE ONLY "public"."message_receipts"                                                                                ADD CONSTRAINT "message_receipts_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                  ALTER TABLE ONLY "public"."messages"                                                                                        ADD CONSTRAINT "messages_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                          ALTER TABLE ONLY "public"."notifications"                                                                                   ADD CONSTRAINT "notifications_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                     ALTER TABLE ONLY "public"."posts"                                                                                           ADD CONSTRAINT "posts_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                             ALTER TABLE ONLY "public"."profiles"                                                                                        ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                          ALTER TABLE ONLY "public"."profiles"                                                                                        ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");                                                                                                                                                                                                                                                                                                                                                                                                                                 ALTER TABLE ONLY "public"."shares"                                                                                          ADD CONSTRAINT "shares_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                            ALTER TABLE ONLY "public"."submissions"                                                                                     ADD CONSTRAINT "submissions_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                       ALTER TABLE ONLY "public"."users"                                                                                           ADD CONSTRAINT "users_email_key" UNIQUE ("email");                                                                                                                                                                                                                                                                                                                                                                                                                                          ALTER TABLE ONLY "public"."users"                                                                                           ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                             ALTER TABLE ONLY "public"."users"                                                                                           ADD CONSTRAINT "users_username_key" UNIQUE ("username");                                                                                                                                                                                                                                                                                                                                                                                                                                    ALTER TABLE ONLY "public"."votes"                                                                                           ADD CONSTRAINT "votes_pkey" PRIMARY KEY ("id");                                                                                                                                                                                                                                                                                                                                                                                                                                             ALTER TABLE ONLY "public"."votes"                                                                                           ADD CONSTRAINT "votes_user_id_challenge_id_key" UNIQUE ("user_id", "challenge_id");                                                                                                                                                                                                                                                                                                                                                                                                         CREATE INDEX "idx_comment_likes_comment_id" ON "public"."comment_likes" USING "btree" ("comment_id");                                                                                                                                                                                                                                                                                                                                                                                           CREATE INDEX "idx_comments_post_id" ON "public"."comments" USING "btree" ("post_id");                                                                                                                                                                                                                                                                                                                                                                                                           CREATE INDEX "idx_comments_user_id" ON "public"."comments" USING "btree" ("user_id");                                                                                                                                                                                                                                                                                                                                                                                                           CREATE INDEX "idx_group_invitations_group" ON "public"."group_invitations" USING "btree" ("group_id");                                                                                                                                                                                                                                                                                                                                                                                          CREATE INDEX "idx_group_invitations_invitee" ON "public"."group_invitations" USING "btree" ("invitee_id");                                                                                                                                                                                                                                                                                                                                                                                      CREATE INDEX "idx_group_members_group_id" ON "public"."group_members" USING "btree" ("group_id");                                                                                                                                                                                                                                                                                                                                                                                               CREATE INDEX "idx_group_members_user_id" ON "public"."group_members" USING "btree" ("user_id");                                                                                                                                                                                                                                                                                                                                                                                                 CREATE INDEX "idx_group_messages_created_at" ON "public"."group_messages" USING "btree" ("created_at");                                                                                                                                                                                                                                                                                                                                                                                         CREATE INDEX "idx_group_messages_group_id" ON "public"."group_messages" USING "btree" ("group_id");                                                                                                                                                                                                                                                                                                                                                                                             CREATE INDEX "idx_group_messages_user_id" ON "public"."group_messages" USING "btree" ("user_id");                                                                                                                                                                                                                                                                                                                                                                                               CREATE INDEX "idx_groups_created_by" ON "public"."groups" USING "btree" ("created_by");                                                                                                                                                                                                                                                                                                                                                                                                         CREATE INDEX "idx_likes_post_id" ON "public"."likes" USING "btree" ("post_id");                                                                                                                                                                                                                                                                                                                                                                                                                 CREATE INDEX "idx_likes_user_id" ON "public"."likes" USING "btree" ("user_id");                                                                                                                                                                                                                                                                                                                                                                                                                 CREATE INDEX "idx_message_reactions_message_id" ON "public"."group_message_reactions" USING "btree" ("message_id");                                                                                                                                                                                                                                                                                                                                                                             CREATE INDEX "idx_message_reactions_user_id" ON "public"."group_message_reactions" USING "btree" ("user_id");                                                                                                                                                                                                                                                                                                                                                                                   CREATE INDEX "idx_message_reads_message_id" ON "public"."group_message_reads" USING "btree" ("message_id");                                                                                                                                                                                                                                                                                                                                                                                     CREATE INDEX "idx_message_reads_user_id" ON "public"."group_message_reads" USING "btree" ("user_id");                                                                                                                                                                                                                                                                                                                                                                                           CREATE INDEX "idx_message_receipts_message_id" ON "public"."message_receipts" USING "btree" ("message_id");                                                                                                                                                                                                                                                                                                                                                                                     CREATE INDEX "idx_message_receipts_user_id" ON "public"."message_receipts" USING "btree" ("user_id");                                                                                                                                                                                                                                                                                                                                                                                           CREATE INDEX "idx_messages_created_at" ON "public"."messages" USING "btree" ("created_at" DESC);                                                                                                                                                                                                                                                                                                                                                                                                CREATE INDEX "idx_messages_group_id" ON "public"."messages" USING "btree" ("group_id");                                                                                                                                                                                                                                                                                                                                                                                                         CREATE INDEX "idx_notifications_created_at" ON "public"."notifications" USING "btree" ("created_at" DESC);                                                                                                                                                                                                                                                                                                                                                                                      CREATE INDEX "idx_notifications_user_unread" ON "public"."notifications" USING "btree" ("user_id") WHERE (NOT "is_read");                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               CREATE INDEX "idx_posts_created_at" ON "public"."posts" USING "btree" ("created_at" DESC);                                                                                                                                                                                                                                                                                                                                                                                                      CREATE INDEX "idx_posts_group_id" ON "public"."posts" USING "btree" ("group_id");                                                                                                                                                                                                                                                                                                                                                                                                               CREATE INDEX "idx_posts_user_id" ON "public"."posts" USING "btree" ("user_id");                                                                                                                                                                                                                                                                                                                                                                                                                 CREATE INDEX "idx_profiles_username" ON "public"."profiles" USING "btree" ("username");                                                                                                                                                                                                                                                                                                                                                                                                         CREATE INDEX "idx_shares_post_id" ON "public"."shares" USING "btree" ("post_id");                                                                                                                                                                                                                                                                                                                                                                                                               CREATE OR REPLACE TRIGGER "update_group_last_message" AFTER INSERT ON "public"."messages" FOR EACH ROW EXECUTE FUNCTION "public"."update_group_last_message_at"();                                                                                                                                                                                                                                                                                                                                                                                                                                                      CREATE OR REPLACE TRIGGER "update_group_messages_updated_at" BEFORE UPDATE ON "public"."group_messages" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();                                                                                                                                                                                                                                                                                                                                                                                                                                            CREATE OR REPLACE TRIGGER "update_member_count" AFTER INSERT OR DELETE ON "public"."group_members" FOR EACH ROW EXECUTE FUNCTION "public"."update_group_member_count"();                                                                                                                                                                                                                                                                                                                                                                                                                                                CREATE OR REPLACE TRIGGER "update_messages_updated_at" BEFORE UPDATE ON "public"."messages" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();                                                                                                                                                                                                                                                                                                                                                                                                                                                        CREATE OR REPLACE TRIGGER "update_post_comment_count" AFTER INSERT OR DELETE ON "public"."comments" FOR EACH ROW EXECUTE FUNCTION "public"."update_post_counts"();                                                                                                                                                                                                                                                                                                                                                                                                                                                      CREATE OR REPLACE TRIGGER "update_post_like_count" AFTER INSERT OR DELETE ON "public"."likes" FOR EACH ROW EXECUTE FUNCTION "public"."update_post_counts"();                                                                                                                                                                                                                                                                                                                                                                                                                                                            CREATE OR REPLACE TRIGGER "update_post_share_count" AFTER INSERT ON "public"."shares" FOR EACH ROW EXECUTE FUNCTION "public"."update_post_counts"();                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CREATE OR REPLACE TRIGGER "update_posts_updated_at" BEFORE UPDATE ON "public"."posts" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();                                                                                                                                                                                                                                                                                                                                                                                                                                                              CREATE OR REPLACE TRIGGER "update_users_updated_at" BEFORE UPDATE ON "public"."users" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();                                                                                                                                                                                                                                                                                                                                                                                                                                                              ALTER TABLE ONLY "public"."challenges"                                                                                      ADD CONSTRAINT "challenges_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."users"("id");                                                                                                                                                                                                                                                                                                                                                                                   ALTER TABLE ONLY "public"."comment_likes"                                                                                   ADD CONSTRAINT "comment_likes_comment_id_fkey" FOREIGN KEY ("comment_id") REFERENCES "public"."comments"("idpublic"."comment_likes"                                                                                   ADD CONSTRAINT "comment_likes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("idpublic"."comments"                                                                                        ADD CONSTRAINT "comments_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "public"."comments"("idpublic"."comments"                                                                                        ADD CONSTRAINT "comments_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                           ALTER TABLE ONLY "public"."comments"                                                                                        ADD CONSTRAINT "fk_comments_user_id" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                        ALTER TABLE ONLY "public"."posts"                                                                                           ADD CONSTRAINT "fk_profiles" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");                                                                                                                                                                                                                                                                                                                                                                                                  ALTER TABLE ONLY "public"."posts"                                                                                           ADD CONSTRAINT "fk_user" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id");                                                                                                                                                                                                                                                                                                                                                                                                         ALTER TABLE ONLY "public"."group_invitations"                                                                               ADD CONSTRAINT "group_invitations_invitee_id_fkey" FOREIGN KEY ("invitee_id") REFERENCES "auth"."users"("idpublic"."group_invitations"                                                                               ADD CONSTRAINT "group_invitations_inviter_id_fkey" FOREIGN KEY ("inviter_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ALTER TABLE ONLY "public"."group_members"                                                                                   ADD CONSTRAINT "group_members_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "public"."groups"("idpublic"."group_members"                                                                                   ADD CONSTRAINT "group_members_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ALTER TABLE ONLY "public"."group_message_reactions"                                                                         ADD CONSTRAINT "group_message_reactions_message_id_fkey" FOREIGN KEY ("message_id") REFERENCES "public"."group_messages"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ALTER TABLE ONLY "public"."group_message_reactions"                                                                         ADD CONSTRAINT "group_message_reactions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("idpublic"."group_message_reads"                                                                             ADD CONSTRAINT "group_message_reads_message_id_fkey" FOREIGN KEY ("message_id") REFERENCES "public"."group_messages"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ALTER TABLE ONLY "public"."group_message_reads"                                                                             ADD CONSTRAINT "group_message_reads_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("idpublic"."group_messages"                                                                                  ADD CONSTRAINT "group_messages_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "public"."groups"("idpublic"."group_messages"                                                                                  ADD CONSTRAINT "group_messages_reply_to_fkey" FOREIGN KEY ("reply_to") REFERENCES "public"."group_messages"("idpublic"."group_messages"                                                                                  ADD CONSTRAINT "group_messages_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("idpublic"."groups"                                                                                          ADD CONSTRAINT "groups_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("idpublic"."likes"                                                                                           ADD CONSTRAINT "likes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                              ALTER TABLE ONLY "public"."message_receipts"                                                                                ADD CONSTRAINT "message_receipts_message_id_fkey" FOREIGN KEY ("message_id") REFERENCES "public"."messages"("idpublic"."message_receipts"                                                                                ADD CONSTRAINT "message_receipts_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("idpublic"."messages"                                                                                        ADD CONSTRAINT "messages_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                           ALTER TABLE ONLY "public"."notifications"                                                                                   ADD CONSTRAINT "notifications_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("idpublic"."posts"                                                                                           ADD CONSTRAINT "posts_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                              ALTER TABLE ONLY "public"."profiles"                                                                                        ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                                     ALTER TABLE ONLY "public"."shares"                                                                                          ADD CONSTRAINT "shares_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                             ALTER TABLE ONLY "public"."submissions"                                                                                     ADD CONSTRAINT "submissions_challenge_id_fkey" FOREIGN KEY ("challenge_id") REFERENCES "public"."challenges"("id");                                                                                                                                                                                                                                                                                                                                                                         ALTER TABLE ONLY "public"."submissions"                                                                                     ADD CONSTRAINT "submissions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id");                                                                                                                                                                                                                                                                                                                                                                                        ALTER TABLE ONLY "public"."users"                                                                                           ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;                                                                                                                                                                                                                                                                                                                                                                                        ALTER TABLE ONLY "public"."votes"                                                                                           ADD CONSTRAINT "votes_challenge_id_fkey" FOREIGN KEY ("challenge_id") REFERENCES "public"."challenges"("id");                                                                                                                                                                                                                                                                                                                                                                               ALTER TABLE ONLY "public"."votes"                                                                                           ADD CONSTRAINT "votes_submission_id_fkey" FOREIGN KEY ("submission_id") REFERENCES "public"."submissions"("id");                                                                                                                                                                                                                                                                                                                                                                            ALTER TABLE ONLY "public"."votes"                                                                                           ADD CONSTRAINT "votes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id");                                                                                                                                                                                                                                                                                                                                                                                              CREATE POLICY "Anyone can view comments" ON "public"."comments" FOR SELECT USING (true);                                                                                                                                                                                                                                                                                                                                                                                                        CREATE POLICY "Anyone can view likes" ON "public"."likes" FOR SELECT USING (true);                                                                                                                                                                                                                                                                                                                                                                                                              CREATE POLICY "Enable insert for authenticated users" ON "public"."groups" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "created_by"));                                                                                                                                                                                                                                                                                                                                                                                                                                                                  CREATE POLICY "Enable insert for authentication trigger" ON "public"."users" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "id"));                                                                                                                                                                                                                                                                                                                                                                                                                                                                        CREATE POLICY "Enable insert for groups" ON "public"."groups" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "created_by"));                                                                                                                                                                                                                                                                                                                                                                                                                                                                               CREATE POLICY "Enable insert for members" ON "public"."group_members" FOR INSERT TO "authenticated" WITH CHECK ((("auth"."uid"() = "user_id") AND (EXISTS ( SELECT 1                                                                               FROM "public"."groups"                                                                                                 WHERE (("groups"."id" = "group_members"."group_id") AND ((NOT "groups"."is_private") OR ("groups"."created_by" = "auth"."uid"())))))));                                                                                                                                                                                                                                                                                                                                                                                                                                                                               CREATE POLICY "Enable read access for authenticated users" ON "public"."profiles" FOR SELECT TO "authenticated" USING (true);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           CREATE POLICY "Enable read access for groups" ON "public"."groups" FOR SELECT TO "authenticated" USING (true);                                                                                                                                                                                                                                                                                                                                                                                  CREATE POLICY "Enable read access for members" ON "public"."group_members" FOR SELECT TO "authenticated" USING (true);                                                                                                                                                                                                                                                                                                                                                                          CREATE POLICY "Enable update for users based on id" ON "public"."profiles" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));                                                                                                                                                                                                                                                                                                                                                                                                                                          CREATE POLICY "Users can access group messages" ON "public"."group_messages" FOR SELECT USING ((EXISTS ( SELECT 1          FROM "public"."group_members"                                                                                          WHERE (("group_members"."group_id" = "group_messages"."group_id") AND ("group_members"."user_id" = "auth"."uidsers can add reactions to messages" ON "public"."group_message_reactions" FOR INSERT WITH CHECK ((("auth"."uid"() = "user_id") AND (EXISTS ( SELECT 1                                                                              FROM ("public"."group_messages"                                                                                           JOIN "public"."group_members" ON (("group_messages"."group_id" = "group_members"."group_id")))                       WHERE (("group_messages"."id" = "group_message_reactions"."message_id") AND ("group_members"."user_id" = "auth"."uid"()))))));                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        CREATE POLICY "Users can create comments" ON "public"."comments" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));                                                                                                                                                                                                                                                                                                                                                                          CREATE POLICY "Users can delete their own comments" ON "public"."comments" FOR DELETE USING (("auth"."uid"() = "user_id"));                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             CREATE POLICY "Users can delete their own posts" ON "public"."posts" FOR DELETE USING (("auth"."uid"() = "user_id"));                                                                                                                                                                                                                                                                                                                                                                           CREATE POLICY "Users can insert messages in their groups" ON "public"."group_messages" FOR INSERT WITH CHECK (((EXISTS ( SELECT 1                                                                                                                  FROM "public"."group_members"                                                                                          WHERE (("group_members"."group_id" = "group_messages"."group_id") AND ("group_members"."user_id" = "auth"."uid"())))) AND ("auth"."uid"() = "user_id")));                                                                                                                                                                                                                                                                                                                                                                                                                                                             CREATE POLICY "Users can like posts" ON "public"."likes" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));                                                                                                                                                                                                                                                                                                                                                                                  CREATE POLICY "Users can mark messages as read" ON "public"."group_message_reads" FOR INSERT WITH CHECK ((("auth"."uid"() = "user_id") AND (EXISTS ( SELECT 1                                                                                      FROM ("public"."group_messages"                                                                                           JOIN "public"."group_members" ON (("group_messages"."group_id" = "group_members"."group_id")))                       WHERE (("group_messages"."id" = "group_message_reads"."message_id") AND ("group_members"."user_id" = "auth"."uidsers can mark their notifications as read" ON "public"."notifications" FOR UPDATE USING (("user_id" = "auth"."uid"())) WITH CHECK (("user_id" = "auth"."uid"()));                                                                                                                                                                                                                                                                                                                                                                                                                                       CREATE POLICY "Users can respond to their invitations" ON "public"."group_invitations" FOR UPDATE USING (("invitee_id" = "auth"."uid"())) WITH CHECK (("invitee_id" = "auth"."uid"()));                                                                                                                                                                                                                                                                                                                                                                                                                                 CREATE POLICY "Users can unlike posts" ON "public"."likes" FOR DELETE USING (("auth"."uid"() = "user_id"));                                                                                                                                                                                                                                                                                                                                                                                     CREATE POLICY "Users can update own profile" ON "public"."users" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));                                                                                                                                                                                                                                                                                                                                                                                                                                                    CREATE POLICY "Users can update their own comments" ON "public"."comments" FOR UPDATE USING (("auth"."uid"() = "user_id"));                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             CREATE POLICY "Users can update their own posts" ON "public"."posts" FOR UPDATE USING (("auth"."uid"() = "user_id"));                                                                                                                                                                                                                                                                                                                                                                           CREATE POLICY "Users can view all profiles" ON "public"."users" FOR SELECT TO "authenticated" USING (true);                                                                                                                                                                                                                                                                                                                                                                                     CREATE POLICY "Users can view messages in their groups" ON "public"."group_messages" FOR SELECT USING ((EXISTS ( SELECT 1                                                                                                                          FROM "public"."group_members"                                                                                          WHERE (("group_members"."group_id" = "group_messages"."group_id") AND ("group_members"."user_id" = "auth"."uidsers can view reactions in their groups" ON "public"."group_message_reactions" FOR SELECT USING ((EXISTS ( SELECT 1                                                                                                                FROM ("public"."group_messages"                                                                                           JOIN "public"."group_members" ON (("group_messages"."group_id" = "group_members"."group_id")))                       WHERE (("group_messages"."id" = "group_message_reactions"."message_id") AND ("group_members"."user_id" = "auth"."uid"())))));                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         CREATE POLICY "Users can view read receipts in their groups" ON "public"."group_message_reads" FOR SELECT USING ((EXISTS ( SELECT 1                                                                                                                FROM ("public"."group_messages"                                                                                           JOIN "public"."group_members" ON (("group_messages"."group_id" = "group_members"."group_id")))                       WHERE (("group_messages"."id" = "group_message_reads"."message_id") AND ("group_members"."user_id" = "auth"."uidsers can view their notifications" ON "public"."notifications" FOR SELECT USING (("user_id" = "auth"."uid"()));                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ALTER TABLE "public"."group_invitations" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                     ALTER TABLE "public"."group_members" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                         ALTER TABLE "public"."group_message_reactions" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                               ALTER TABLE "public"."group_message_reads" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                   ALTER TABLE "public"."group_messages" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                        ALTER TABLE "public"."groups" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                                ALTER TABLE "public"."message_receipts" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                      ALTER TABLE "public"."messages" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                              ALTER TABLE "public"."notifications" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                         ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;                                                                                                                                                                                                                                                                                                              ALTER TABLE "public"."userssupabase_realtime" OWNER TO "postgres";                                                                                                                                                                                                                                                                                                              ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."group_message_reactions";                                                                                                                                                                                                                                                                                                                                                                                                    ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."group_message_reads";                                                                                                                                                                                                                                                                                                                                                                                                            ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."group_messages";                                                                                                                                                                                                                                                                                                                                                                                                                 ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."posts";                                                                                                                                                                                                              GRANT USAGE ON SCHEMA "public" TO "postgres";                                                                           GRANT USAGE ON SCHEMA "public" TO "anon";                                                                               GRANT USAGE ON SCHEMA "public" TO "authenticated";                                                                      GRANT USAGE ON SCHEMA "public" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                                 GRANT ALL ON FUNCTION "public"."cleanup_expired_content"() TO "anon";                                                   GRANT ALL ON FUNCTION "public"."cleanup_expired_content"() TO "authenticated";                                          GRANT ALL ON FUNCTION "public"."cleanup_expired_content"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                   GRANT ALL ON FUNCTION "public"."create_group_with_admin"("p_name" "text", "p_description" "text", "p_image_url" "text", "p_is_private" boolean, "p_user_id" "uuid") TO "anon";                                                                  GRANT ALL ON FUNCTION "public"."create_group_with_admin"("p_name" "text", "p_description" "text", "p_image_url" "text", "p_is_private" boolean, "p_user_id" "uuid") TO "authenticated";                                                         GRANT ALL ON FUNCTION "public"."create_group_with_admin"("p_name" "text", "p_description" "text", "p_image_url" "text", "p_is_private" boolean, "p_user_id" "uuid") TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                  GRANT ALL ON FUNCTION "public"."create_post"("p_content_type" "text", "p_content_url" "text", "p_caption" "text", "p_group_id" "uuid", "p_expires_at" timestamp with time zone, "p_is_challenge_entry" boolean, "p_challenge_id" "uuid") TO "anon";                                                                                                                     GRANT ALL ON FUNCTION "public"."create_post"("p_content_type" "text", "p_content_url" "text", "p_caption" "text", "p_group_id" "uuid", "p_expires_at" timestamp with time zone, "p_is_challenge_entry" boolean, "p_challenge_id" "uuid") TO "authenticated";                                                                                                            GRANT ALL ON FUNCTION "public"."create_post"("p_content_type" "text", "p_content_url" "text", "p_caption" "text", "p_group_id" "uuid", "p_expires_at" timestamp with time zone, "p_is_challenge_entry" boolean, "p_challenge_id" "uuid") TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GRANT ALL ON FUNCTION "public"."get_group_details"("p_group_id" "uuid") TO "anon";                                      GRANT ALL ON FUNCTION "public"."get_group_details"("p_group_id" "uuid") TO "authenticated";                             GRANT ALL ON FUNCTION "public"."get_group_details"("p_group_id" "uuid") TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                      GRANT ALL ON FUNCTION "public"."get_group_with_details"("p_group_id" "uuid") TO "anon";                                 GRANT ALL ON FUNCTION "public"."get_group_with_details"("p_group_id" "uuid") TO "authenticated";                        GRANT ALL ON FUNCTION "public"."get_group_with_details"("p_group_id" "uuid") TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                 GRANT ALL ON FUNCTION "public"."get_post_with_user"("post_id" "uuid") TO "anon";                                        GRANT ALL ON FUNCTION "public"."get_post_with_user"("post_id" "uuid") TO "authenticated";                               GRANT ALL ON FUNCTION "public"."get_post_with_user"("post_id" "uuid") TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                        GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";                                                           GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";                                                  GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                           GRANT ALL ON FUNCTION "public"."handle_post_counts"() TO "anon";                                                        GRANT ALL ON FUNCTION "public"."handle_post_counts"() TO "authenticated";                                               GRANT ALL ON FUNCTION "public"."handle_post_counts"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                        GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "anon";                                                         GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "authenticated";                                                GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                         GRANT ALL ON FUNCTION "public"."invite_to_group"("p_group_id" "uuid", "p_invitee_id" "uuid") TO "anon";                 GRANT ALL ON FUNCTION "public"."invite_to_group"("p_group_id" "uuid", "p_invitee_id" "uuid") TO "authenticated";        GRANT ALL ON FUNCTION "public"."invite_to_group"("p_group_id" "uuid", "p_invitee_id" "uuid") TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                 GRANT ALL ON FUNCTION "public"."respond_to_group_invitation"("p_invitation_id" "uuid", "p_accept" boolean) TO "anon";   GRANT ALL ON FUNCTION "public"."respond_to_group_invitation"("p_invitation_id" "uuid", "p_accept" boolean) TO "authenticated";                                                                                                                  GRANT ALL ON FUNCTION "public"."respond_to_group_invitation"("p_invitation_id" "uuid", "p_accept" boolean) TO "service_rolepublic"."sync_user_data"() TO "anon";                                                            GRANT ALL ON FUNCTION "public"."sync_user_data"() TO "authenticated";                                                   GRANT ALL ON FUNCTION "public"."sync_user_data"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                            GRANT ALL ON FUNCTION "public"."update_comment_like_count"() TO "anon";                                                 GRANT ALL ON FUNCTION "public"."update_comment_like_count"() TO "authenticated";                                        GRANT ALL ON FUNCTION "public"."update_comment_like_count"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                 GRANT ALL ON FUNCTION "public"."update_group_last_message_at"() TO "anon";                                              GRANT ALL ON FUNCTION "public"."update_group_last_message_at"() TO "authenticated";                                     GRANT ALL ON FUNCTION "public"."update_group_last_message_at"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                              GRANT ALL ON FUNCTION "public"."update_group_member_count"() TO "anon";                                                 GRANT ALL ON FUNCTION "public"."update_group_member_count"() TO "authenticated";                                        GRANT ALL ON FUNCTION "public"."update_group_member_count"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                 GRANT ALL ON FUNCTION "public"."update_post_counts"() TO "anon";                                                        GRANT ALL ON FUNCTION "public"."update_post_counts"() TO "authenticated";                                               GRANT ALL ON FUNCTION "public"."update_post_counts"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                        GRANT ALL ON FUNCTION "public"."update_post_like_count"() TO "anon";                                                    GRANT ALL ON FUNCTION "public"."update_post_like_count"() TO "authenticated";                                           GRANT ALL ON FUNCTION "public"."update_post_like_count"() TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                    GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";                                                  GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";                                         GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_rolepublic"."challenges" TO "anon";                                                                     GRANT ALL ON TABLE "public"."challenges" TO "authenticated";                                                            GRANT ALL ON TABLE "public"."challenges" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                     GRANT ALL ON TABLE "public"."comment_likes" TO "anon";                                                                  GRANT ALL ON TABLE "public"."comment_likes" TO "authenticated";                                                         GRANT ALL ON TABLE "public"."comment_likes" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                  GRANT ALL ON TABLE "public"."comments" TO "anon";                                                                       GRANT ALL ON TABLE "public"."comments" TO "authenticated";                                                              GRANT ALL ON TABLE "public"."comments" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                       GRANT ALL ON TABLE "public"."group_invitations" TO "anon";                                                              GRANT ALL ON TABLE "public"."group_invitations" TO "authenticated";                                                     GRANT ALL ON TABLE "public"."group_invitations" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                              GRANT ALL ON TABLE "public"."group_members" TO "anon";                                                                  GRANT ALL ON TABLE "public"."group_members" TO "authenticated";                                                         GRANT ALL ON TABLE "public"."group_members" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                  GRANT ALL ON TABLE "public"."group_message_reactions" TO "anon";                                                        GRANT ALL ON TABLE "public"."group_message_reactions" TO "authenticated";                                               GRANT ALL ON TABLE "public"."group_message_reactions" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                        GRANT ALL ON TABLE "public"."group_message_reads" TO "anon";                                                            GRANT ALL ON TABLE "public"."group_message_reads" TO "authenticated";                                                   GRANT ALL ON TABLE "public"."group_message_reads" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                            GRANT ALL ON TABLE "public"."group_messages" TO "anon";                                                                 GRANT ALL ON TABLE "public"."group_messages" TO "authenticated";                                                        GRANT ALL ON TABLE "public"."group_messages" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                 GRANT ALL ON TABLE "public"."groups" TO "anon";                                                                         GRANT ALL ON TABLE "public"."groups" TO "authenticated";                                                                GRANT ALL ON TABLE "public"."groups" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                         GRANT ALL ON TABLE "public"."likes" TO "anon";                                                                          GRANT ALL ON TABLE "public"."likes" TO "authenticated";                                                                 GRANT ALL ON TABLE "public"."likes" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                          GRANT ALL ON TABLE "public"."message_receipts" TO "anon";                                                               GRANT ALL ON TABLE "public"."message_receipts" TO "authenticated";                                                      GRANT ALL ON TABLE "public"."message_receipts" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                               GRANT ALL ON TABLE "public"."messages" TO "anon";                                                                       GRANT ALL ON TABLE "public"."messages" TO "authenticated";                                                              GRANT ALL ON TABLE "public"."messages" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                       GRANT ALL ON TABLE "public"."notifications" TO "anon";                                                                  GRANT ALL ON TABLE "public"."notifications" TO "authenticated";                                                         GRANT ALL ON TABLE "public"."notifications" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                  GRANT ALL ON TABLE "public"."posts" TO "anon";                                                                          GRANT ALL ON TABLE "public"."posts" TO "authenticated";                                                                 GRANT ALL ON TABLE "public"."posts" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                          GRANT ALL ON TABLE "public"."profiles" TO "anon";                                                                       GRANT ALL ON TABLE "public"."profiles" TO "authenticated";                                                              GRANT ALL ON TABLE "public"."profiles" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                       GRANT ALL ON TABLE "public"."shares" TO "anon";                                                                         GRANT ALL ON TABLE "public"."shares" TO "authenticated";                                                                GRANT ALL ON TABLE "public"."shares" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                         GRANT ALL ON TABLE "public"."submissions" TO "anon";                                                                    GRANT ALL ON TABLE "public"."submissions" TO "authenticated";                                                           GRANT ALL ON TABLE "public"."submissions" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                    GRANT ALL ON TABLE "public"."users" TO "anon";                                                                          GRANT ALL ON TABLE "public"."users" TO "authenticated";                                                                 GRANT ALL ON TABLE "public"."users" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                          GRANT ALL ON TABLE "public"."votes" TO "anon";                                                                          GRANT ALL ON TABLE "public"."votes" TO "authenticated";                                                                 GRANT ALL ON TABLE "public"."votes" TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                          ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";                  ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";                      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";             ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_rolepostgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";                  ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";                      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";             ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";                     ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";                         ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";                ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";                                                                                                                                                                                                                                      